/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.3.4, using .NET Server 2.3.0 template (version 8)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>

** Copyright (c) 2006-2015 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.3
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.3, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace OPCServer/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.3/
**
** Created: 22.03.2015
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace OPCServer
{
    #region WeatherStationModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.WeatherStationType, NamespaceUri=OPCServer.Namespaces.OPCServer)]
    public partial class WeatherStationModel : BaseObjectModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherStationModel" /> class.
        /// </summary>
        public WeatherStationModel() : this((WeatherStationModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherStationModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public WeatherStationModel(WeatherStationModel template) : base(template)
        {
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Conditions
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OPCServer)]
        public string Conditions { get; set; }

        /// <summary>
        /// Gets or sets the Forecast
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.OPCServer)]
        public string[] Forecast { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IWeatherStationMethods implemention = WeatherStationMethods;

            if (implemention == null)
            {
                implemention = this as IWeatherStationMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(OPCServer.Methods.WeatherStationType_getConditions, OPCServer.Namespaces.OPCServer).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.getConditions(context, this);
                if (ret.IsGood())
                {
                }
                return ret;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(OPCServer.Methods.WeatherStationType_getForecast, OPCServer.Namespaces.OPCServer).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.getForecast(context, this);
                if (ret.IsGood())
                {
                }
                return ret;
            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the WeatherStation methods.
        /// </summary>
        /// <value>
        /// The WeatherStation methods.
        /// </value>
        public IWeatherStationMethods WeatherStationMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the WeatherStationModel object.
    /// </summary>
    public interface IWeatherStationMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode getConditions(
            RequestContext context,
            WeatherStationModel model
            );

        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        StatusCode getForecast(
            RequestContext context,
            WeatherStationModel model
            );

    }

    #endregion



}
